bf(C++)'s  i(keywords) are a superset of bf(C)'s  keywords. Here is a
list of all keywords of the language:
    COMMENT(table generated by src/keywordsort.cc (using -lbobcat))
        verb(alignas         char16_t   double       long      reinterpret_cast true     
alignof         char32_t   dynamic_cast module    requires         try      
and             class      else         mutable   return           typedef  
and_eq          co_await   enum         namespace short            typeid   
asm             co_return  explicit     new       signed           typename 
atomic_cancel   co_yield   export       noexcept  sizeof           union    
atomic_commit   compl      extern       not       static           unsigned 
atomic_noexcept concept    false        not_eq    static_assert    using    
auto            const      float        nullptr   static_cast      virtual  
bitand          const_cast for          operator  struct           void     
bitor           constexpr  friend       or        switch           volatile 
bool            continue   goto         or_eq     synchronized     wchar_t  
break           decltype   if           private   template         while    
case            default    import       protected this             xor      
catch           delete     inline       public    thread_local     xor_eq   
char            do         int          register  throw)

Notes:
    itemization(
COMMENT(
    it() The ti(export) keyword is no longer actively used by bf(C++), but it
is kept as a keyword, reserved for future use.
END)
    it() Since the i(C++17) standard the keyword ti(register) is no longer
        used, but it remains a reserved identifier. In other words, definitions
        like verb(    register int index;)

result in compilation errors. Also, tt(register) is no longer
        considered a i(storage class specifier) (storage class specifiers are
        tt(extern, thread_local, mutable) and tt(static)).
    it() the hi(operator: keywords)em(operator keywords): 
tt(
    and, and_eq, bitand, bitor, compl, not, not_eq, or, or_eq, xor) and
tt(xor_eq) are symbolic alternatives for, respectively, tt(&&, &=, &, |, ~, !,
!=, ||, |=, ^) and tt(^=).
    it() bf(C++) also recognizes the special identifiers tt(final, override,
transaction_safe), and tt(transaction_safe_override). These identifiers are
special in the sense that they acquire special meanings when declaring classes
or polymorphic functions. Section ref(FINAL) provides further details.
    )

Keywords can only be used for their intended purpose and cannot be used as
names for other entities (e.g., variables, functions, class-names, etc.). In
addition to keywords i(identifiers starting with an underscore) and living in
the emi(global namespace) (i.e., not using any explicit namespace or using the
mere tt(::) namespace specification) or living in the em(std namespace) are
 i(reserved identifiers) in the sense that their use is a prerogative of the
implementor.
